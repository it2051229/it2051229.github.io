{"version":3,"sources":["Components/NavigationBarComponent.js","Entities/Database.js","Entities/NumberUtils.js","Components/DashboardComponent.js","Components/TransactionComponent.js","Components/StockComponent.js","Components/InsiderComponent.js","Components/AboutComponent.js","App.js","reportWebVitals.js","index.js"],"names":["NavigationBarComponent","props","menuNavLinks","map","menu","activeMenuName","Nav","Link","href","active","eventKey","Navbar","collapseOnSelect","bg","variant","expand","fixed","Container","Brand","Toggle","Collapse","id","className","React","Component","Database","this","databaseName","localStorage","setItem","JSON","stringify","stocks","parse","getItem","Object","keys","stockName","insiderName","persist","transaction","index","i","length","splice","date","shares","type","price","push","NumberUtils","x","toString","replace","toFixed","DashboardComponent","database","state","getFromDateFilter","getToDateFilter","fromDate","toDate","Date","setHours","getTime","csvData","getStockNames","forEach","getStockInsiders","getInsiderTransactions","csvLine","getFullYear","getMonth","getDate","downloadLink","document","createElement","download","encodeURIComponent","click","stockTableRows","stockNames","sharesAcquired","sharesDisposed","totalCost","highestSharePrice","lowestSharePrice","averageCost","onClick","e","window","location","formatCurrency","formatWithCommas","Row","Col","md","Button","handleExportTransactionsClick","Form","Group","Text","Control","placeholder","value","onChange","saveFromDateFilter","target","setState","saveToDateFilter","clearDateFilter","Table","responsive","striped","bordered","hover","TransactionComponent","stock","trim","toUpperCase","person","isNaN","alert","parseInt","parseFloat","addTransaction","totalShares","removeStockInsider","file","fileReader","FileReader","onload","numTransactionsAdded","result","split","line","tokens","err","insiderShares","console","log","readAsText","stockNamesDataList","insidersDataList","insider","Label","list","required","Check","label","name","checked","step","style","textAlign","handleAddTransactionClick","Alert","controlId","handleImportTransactionsClick","files","StockComponent","match","params","confirm","deleteStock","toLowerCase","insiders","insiderTableRows","insiderAverageCost","handleDeleteStockClick","InsiderComponent","event","transactions","slice","removeTransaction","sort","transactionA","transactionB","transactionTableRows","isTransactionChecked","handleTransactionCheckChange","handleDeleteInsiderClick","handleDeleteTransactionsClick","width","AboutComponent","link","rel","alt","borderWidth","src","xmlnsDct","property","xmlnsCc","buyMeACoffee","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b09a96cb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav, Container } from \"react-bootstrap\";\r\n\r\nclass NavigationBarComponent extends React.Component {\r\n\r\n    // Initialize the header\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    // Display the header\r\n    render() {\r\n        const menus = [\r\n            {\"name\": \"Dashboard\", \"link\": \"#dashboard\"},\r\n            {\"name\": \"About\", \"link\": \"#about\"}\r\n        ];\r\n\r\n        // Put the nav links in a list and show which is the active state\r\n        const menuNavLinks = menus.map((menu) => {\r\n            if(menu[\"name\"] === this.props.activeMenuName)\r\n                return (\r\n                    <Nav.Link href={menu[\"link\"]} active eventKey={menu[\"name\"]} key={menu[\"name\"]}>\r\n                        {menu[\"name\"]}\r\n                    </Nav.Link>\r\n                );\r\n\r\n            return (\r\n                <Nav.Link href={menu[\"link\"]} eventKey={menu[\"name\"]} key={menu[\"name\"]}>\r\n                    {menu[\"name\"]}\r\n                </Nav.Link>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <Navbar collapseOnSelect bg=\"dark\" variant=\"dark\" expand=\"md\" fixed=\"top\">\r\n\t\t\t\t<Container>\r\n                    <Navbar.Brand href=\"#/\"><strong>Insider Trading</strong><sup>0.1.0</sup></Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            { menuNavLinks }\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n\t\t\t</Navbar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavigationBarComponent;\r\n","class Database\r\n{\r\n    // Initialize the data\r\n    constructor() {\r\n        this.databaseName = \"insider-trading\";\r\n\r\n        // Create the storage for our app if not yet created\r\n        // localStorage.removeItem(this.databaseName);\r\n        if(!(this.databaseName in localStorage))\r\n            localStorage.setItem(this.databaseName, JSON.stringify({}));\r\n        \r\n        this.stocks = JSON.parse(localStorage.getItem(this.databaseName));\r\n    }\r\n\r\n    // Return the list of stock names\r\n    getStockNames() {\r\n        return Object.keys(this.stocks);\r\n    }\r\n\r\n    // Return the names of people related to a stock\r\n    getStockInsiders(stockName) {\r\n        if(!(stockName in this.stocks))\r\n            return [];\r\n\r\n        return Object.keys(this.stocks[stockName]);\r\n    }\r\n\r\n    // Remove an insider data from a stock\r\n    removeStockInsider(stockName, insiderName) {\r\n        if(!(stockName in this.stocks))\r\n            return;\r\n        \r\n        delete this.stocks[stockName][insiderName];\r\n        this.persist();\r\n    }\r\n\r\n    // Remove a transaction\r\n    removeTransaction(stockName, insiderName, transaction) {\r\n        if(!(stockName in this.stocks) || !(insiderName in this.stocks[stockName]))\r\n            return;\r\n        \r\n        let index = -1;\r\n\r\n        for(let i = 0; i < this.stocks[stockName][insiderName].length; i++) {\r\n            if(this.stocks[stockName][insiderName][i] === transaction) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(index === -1)\r\n            return;\r\n        \r\n        this.stocks[stockName][insiderName].splice(index, 1);\r\n        this.persist();\r\n    }\r\n\r\n    // Return the list of transactions of a person of a specific stock\r\n    getInsiderTransactions(stockName, insiderName) {\r\n        if(!(stockName in this.stocks) || !(insiderName in this.stocks[stockName]))\r\n            return[];\r\n            \r\n        return this.stocks[stockName][insiderName];\r\n    }\r\n\r\n    // Delete the stock given the name\r\n    deleteStock(stockName) {\r\n        delete this.stocks[stockName];\r\n        this.persist();\r\n    }\r\n\r\n    // Add a new transaction to the database\r\n    addTransaction(stockName, insiderName, date, shares, type, price) {\r\n        // Add the stock if it doesn't exist yet\r\n        if(!(stockName in this.stocks))\r\n            this.stocks[stockName] = {};\r\n\r\n        // Add the person if it doesn't exist yet in the stock\r\n        if(!(insiderName in this.stocks[stockName]))\r\n            this.stocks[stockName][insiderName] = []\r\n\r\n        // Add the transaction for the person\r\n        this.stocks[stockName][insiderName].push({ \r\n            \"date\": date,\r\n            \"shares\": shares,\r\n            \"type\": type,\r\n            \"price\": price \r\n        });\r\n        \r\n        this.persist();        \r\n    }\r\n\r\n    // Write the stock transactions to the local storage\r\n    persist() {\r\n        localStorage.setItem(this.databaseName, JSON.stringify(this.stocks));\r\n    }\r\n\r\n    // Save the from date filter\r\n    saveFromDateFilter(date) {        \r\n        localStorage.setItem(this.databaseName + \"-fromDate\", date);\r\n    }\r\n\r\n    // Save the to date filter\r\n    saveToDateFilter(date) {\r\n        localStorage.setItem(this.databaseName + \"-toDate\", date);\r\n    }\r\n\r\n    // Return the from date filter\r\n    getFromDateFilter() {\r\n        if(this.databaseName + \"-toDate\" in localStorage)\r\n            return localStorage.getItem(this.databaseName + \"-toDate\");\r\n\r\n        return \"\";\r\n    }\r\n\r\n    // Return the to date filter\r\n    getToDateFilter() {\r\n        if(this.databaseName + \"-fromDate\" in localStorage)\r\n            return localStorage.getItem(this.databaseName + \"-fromDate\");\r\n\r\n        return \"\";\r\n    }\r\n\r\n    // Remove the date filters\r\n    clearDateFilter() {\r\n        delete localStorage[this.databaseName + \"-fromDate\"];\r\n        delete localStorage[this.databaseName + \"-toDate\"];\r\n    }\r\n}\r\n\r\nexport default Database;\r\n","class NumberUtils {\r\n\r\n    // Format the number to have commas\r\n    static formatWithCommas(x) {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    // Convery a numer with commas and a peso sign\r\n    static formatCurrency(x) {\r\n        return \"₱\" + x.toFixed(2).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n}\r\n\r\nexport default NumberUtils;\r\n","import React from \"react\";\r\nimport { Col, Container, Row, Table, Button, Form } from \"react-bootstrap\";\r\nimport NavigationBarComponent from \"./NavigationBarComponent\";\r\nimport Database from \"../Entities/Database\";\r\nimport NumberUtils from \"../Entities/NumberUtils\";\r\n\r\nclass DashboardComponent extends React.Component {\r\n\r\n    // Initialize the dashboard\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.database = new Database();\r\n\r\n        this.state = {\r\n            \"fromDate\": this.database.getFromDateFilter(),\r\n            \"toDate\": this.database.getToDateFilter()\r\n        };\r\n    }\r\n\r\n    // Export the transactions to a CSV file for all stocks\r\n    handleExportTransactionsClick() {\r\n        let fromDate = null;\r\n        let toDate = null;\r\n\r\n        if(this.state.fromDate !== \"\") {\r\n            fromDate = new Date(this.state.fromDate);\r\n            fromDate.setHours(0, 0, 0, 0);\r\n            fromDate = fromDate.getTime();\r\n        }\r\n\r\n        if(this.state.toDate !== \"\") {\r\n            toDate = new Date(this.state.toDate);\r\n            toDate.setHours(0, 0, 0, 0);\r\n            toDate = toDate.getTime();\r\n        }\r\n        \r\n        // Build the CSV\r\n        let csvData = \"Stock,Date,Person,Number of Shares,Trade,Price\\n\";\r\n\r\n        this.database.getStockNames().forEach((stockName) => {\r\n            this.database.getStockInsiders(stockName).forEach((insiderName) => {\r\n                this.database.getInsiderTransactions(stockName, insiderName).forEach((transaction) => {\r\n                    // Apply filter\r\n                    if(!(fromDate === null || toDate === null || (transaction[\"date\"] >= fromDate && transaction[\"date\"] <= toDate)))\r\n                        return;\r\n\r\n                    let date = new Date(transaction[\"date\"]);\r\n\r\n                    let csvLine = stockName;\r\n                    csvLine += \",\" + date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate();\r\n                    csvLine += \",\" + insiderName;\r\n                    csvLine += \",\" + transaction[\"shares\"];\r\n                    csvLine += \",\" + transaction[\"type\"];\r\n                    csvLine += \",\" + transaction[\"price\"];\r\n\r\n                    csvData += csvLine + \"\\n\";\r\n                });\r\n            });\r\n        });\r\n\r\n        // Download the file\r\n        let downloadLink = document.createElement(\"a\");\r\n        downloadLink.download = \"insider-trading.csv\";\r\n        downloadLink.href=\"data:text/plain;charset=utf-8,\" + encodeURIComponent(csvData);\r\n        downloadLink.click();\r\n    }\r\n\r\n    // Display the dashboard\r\n    render() {\r\n        let stockTableRows = <tr>\r\n            <td>...</td>\r\n            <td>...</td>\r\n            <td>...</td>\r\n            <td>...</td>\r\n            <td>...</td>\r\n        </tr>\r\n\r\n        let stockNames = this.database.getStockNames();\r\n\r\n        // Build the table rows for the stocks\r\n        if(stockNames.length > 0) {\r\n            let fromDate = null;\r\n            let toDate = null;\r\n\r\n            if(this.state.fromDate !== \"\") {\r\n                fromDate = new Date(this.state.fromDate);\r\n                fromDate.setHours(0, 0, 0, 0);\r\n                fromDate = fromDate.getTime();\r\n            }\r\n\r\n            if(this.state.toDate !== \"\") {\r\n                toDate = new Date(this.state.toDate);\r\n                toDate.setHours(0, 0, 0, 0);\r\n                toDate = toDate.getTime();\r\n            }\r\n            \r\n            stockTableRows = stockNames.map((stockName) => {\r\n                let sharesAcquired = 0;\r\n                let sharesDisposed = 0;\r\n                let totalCost = 0;\r\n\r\n                let highestSharePrice = -1;\r\n                let lowestSharePrice = -1;\r\n                \r\n                // For each stock calculate the total shares acquired, sold, and purchase cost\r\n                this.database.getStockInsiders(stockName).forEach((insiderName) => {              \r\n                    this.database.getInsiderTransactions(stockName, insiderName).forEach((transaction) => {\r\n                        // Apply filter\r\n                        if(!(fromDate === null || toDate === null || (transaction[\"date\"] >= fromDate && transaction[\"date\"] <= toDate)))\r\n                            return;\r\n\r\n                        if(transaction[\"type\"] === \"BUY\") {\r\n                            sharesAcquired += transaction[\"shares\"];\r\n                            totalCost += transaction[\"shares\"] * transaction[\"price\"];\r\n\r\n                            if(highestSharePrice === -1 || transaction[\"price\"] > highestSharePrice)\r\n                                highestSharePrice = transaction[\"price\"];\r\n                            \r\n                            if(lowestSharePrice === -1 || transaction[\"price\"] < lowestSharePrice)\r\n                                lowestSharePrice = transaction[\"price\"];\r\n                        } else {\r\n                            sharesDisposed += transaction[\"shares\"];\r\n                        }\r\n                    });\r\n                });\r\n\r\n                if(sharesAcquired <= 0) {\r\n                    highestSharePrice = 0;\r\n                    lowestSharePrice = 0;\r\n                }\r\n                \r\n                // Calculate the average cost per share\r\n                let averageCost = totalCost / sharesAcquired;\r\n\r\n                // Deduct the shares disposed\r\n                sharesAcquired -= sharesDisposed;\r\n                totalCost -= averageCost * sharesDisposed;\r\n\r\n                // Recalculate the final average cost after disposal\r\n                averageCost = sharesAcquired > 0 ? totalCost / sharesAcquired : 0;\r\n\r\n                return (\r\n                    <tr key={stockName} onClick={(e) => { window.location.href=\"#/stock/\" + stockName; }}>\r\n                        <td><strong>{ stockName }</strong></td>\r\n                        <td>{ NumberUtils.formatCurrency(averageCost) }</td>\r\n                        <td>{ NumberUtils.formatCurrency(highestSharePrice) }</td>\r\n                        <td>{ NumberUtils.formatCurrency(lowestSharePrice) }</td>\r\n                        <td>{ NumberUtils.formatWithCommas(sharesAcquired) }</td>\r\n                    </tr>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <NavigationBarComponent activeMenuName=\"Dashboard\" />\r\n                <Container>\r\n                    <Row>\r\n                        <Col md=\"12\">\r\n                            <h2>Dashboard</h2>\r\n                            <p>\r\n                                <Button variant=\"primary\" href=\"#/transaction\">Add Transaction</Button>{\" \"}\r\n                                <Button variant=\"dark\" onClick={(e) => { this.handleExportTransactionsClick() }}>Export to CSV File</Button>\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md=\"2\">\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Text className=\"text-muted\">From Date</Form.Text>\r\n                                <Form.Control type=\"date\" placeholder=\"yyyy-mm-dd\" value={this.state.fromDate} \r\n                                    onChange={(e) => { \r\n                                        this.database.saveFromDateFilter(e.target.value); \r\n                                        this.setState({\"fromDate\": e.target.value});\r\n                                    }} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md=\"2\">\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Text className=\"text-muted\">To Date</Form.Text>\r\n                                <Form.Control type=\"date\" placeholder=\"yyyy-mm-dd\" value={this.state.toDate} \r\n                                    onChange={(e) => { \r\n                                        this.database.saveToDateFilter(e.target.value);\r\n                                        this.setState({\"toDate\": e.target.value});\r\n                                    }} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md=\"2\">\r\n                            <Form.Group className=\"mb-3\">\r\n                                <br />\r\n                                <Button variant=\"dark\" onClick={(e) => {this.database.clearDateFilter(); this.setState({\"fromDate\": \"\", \"toDate\": \"\"}); }}>Reset</Button>\r\n                            </Form.Group>                            \r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md=\"12\">\r\n                            <Table responsive striped bordered hover variant=\"dark\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Stock</th>\r\n                                        <th>Average Cost Per Share</th>\r\n                                        <th>Highest Cost Per Share</th>\r\n                                        <th>Lowest Cost Per Share</th>\r\n                                        <th>Total Insider Shares</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>{ stockTableRows }</tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashboardComponent;\r\n","import React from \"react\";\r\nimport { Container, Button, Row, Col, Form, Alert } from \"react-bootstrap\";\r\nimport NavigationBarComponent from \"./NavigationBarComponent\";\r\nimport Database from \"../Entities/Database\";\r\n\r\n// Form for adding a new transaction\r\nclass TransactionComponent extends React.Component {\r\n\r\n    // Initialize the form\r\n    constructor(props) {\r\n        super(props);\r\n        this.database = new Database();\r\n\r\n        this.state = {\r\n            \"stock\": \"\",\r\n            \"person\": \"\",\r\n            \"date\": \"\",\r\n            \"shares\": \"\",\r\n            \"type\": \"BUY\",\r\n            \"price\": \"\"\r\n        };\r\n    }\r\n\r\n    // Validate and add new transaction\r\n    handleAddTransactionClick() {\r\n        // Grab all entered data and sanitize them\r\n        let stockName = this.state.stock.trim().toUpperCase();\r\n        let insiderName = this.state.person.trim().toUpperCase();\r\n        let date = this.state.date.trim();\r\n        let shares = this.state.shares.trim().toUpperCase();\r\n        let type = this.state.type.trim().toUpperCase();\r\n        let price = this.state.price.trim().toUpperCase();\r\n\r\n        // Validate that all fields are provided\r\n        if(stockName === \"\" || insiderName === \"\" || date === \"\" || shares === \"\" || price === \"\" || type === \"\") {\r\n            window.alert(\"All fields are required.\");\r\n            return;\r\n        }\r\n\r\n        // Validate the date\r\n        date = Date.parse(date);\r\n\r\n        if(isNaN(date)) {\r\n            window.alert(\"Invalid date.\");\r\n            return;\r\n        }\r\n\r\n        // Validate the shares\r\n        shares = parseInt(shares);\r\n\r\n        if(isNaN(shares) || shares <= 0) {\r\n            window.alert(\"Shares should be a positive numeric value.\");\r\n            return;\r\n        }\r\n\r\n        // Validate the price\r\n        price = parseFloat(price);\r\n\r\n        if(isNaN(price) || price <= 0) {\r\n            window.alert(\"Price should be a positive decimal value.\");\r\n            return;\r\n        }\r\n\r\n        \r\n        if(type === \"BUY\") {\r\n            // Add the transaction to the database\r\n            this.database.addTransaction(stockName, insiderName, date, shares, type, price);\r\n        } else {\r\n            // Check if the insider will go to negative shares, delete if it goes negative\r\n            let totalShares = 0;\r\n\r\n            this.database.getInsiderTransactions(stockName, insiderName).forEach(transaction => {\r\n                if(transaction[\"type\"] === \"BUY\")\r\n                    totalShares += transaction[\"shares\"];\r\n                else\r\n                    totalShares -= transaction[\"shares\"];\r\n            });\r\n\r\n            totalShares -= shares;\r\n\r\n            // Add the transaction as long as the insider has shares left, otherwise remove the insider\r\n            if(totalShares <= 0)\r\n                this.database.removeStockInsider(stockName, insiderName);\r\n            else\r\n                this.database.addTransaction(stockName, insiderName, date, shares, type, price);\r\n        }\r\n\r\n        // Clear the fields for new entry\r\n        this.setState({\r\n            \"stock\": \"\",\r\n            \"person\": \"\",\r\n            \"date\": \"\",\r\n            \"shares\": \"\",\r\n            \"price\": \"\"\r\n        });\r\n\r\n        window.alert(\"Transaction created.\");\r\n    }\r\n\r\n    // Import CSV file and add it to the database\r\n    handleImportTransactionsClick(file) {\r\n        let fileReader = new FileReader();\r\n\r\n        fileReader.onload = () => {\r\n            try {\r\n                let numTransactionsAdded = 0;\r\n                \r\n                fileReader.result.split(/\\r\\n|\\n/).forEach((line) => {\r\n                    let tokens = line.split(\",\");\r\n                    \r\n                    try {\r\n                        let i = 0;\r\n                        let stockName = tokens[i++].trim().toUpperCase();                    \r\n                        let date = Date.parse(tokens[i++].trim());\r\n                        let insiderName = tokens[i++].trim().toUpperCase();\r\n                        let shares = parseInt(tokens[i++].trim());\r\n                        let type = tokens[i++].trim().toUpperCase();\r\n                        let price = parseFloat(tokens[i++].trim());\r\n\r\n                        if(stockName === \"\" \r\n                            || isNaN(date) \r\n                            || insiderName === \"\" \r\n                            || isNaN(shares) || shares <= 0\r\n                            || (type !== \"BUY\" && type !== \"SELL\")\r\n                            || isNaN(price) || price <= 0)\r\n                            return;\r\n\r\n                        this.database.addTransaction(stockName, insiderName, date, shares, type, price);\r\n                        numTransactionsAdded++;\r\n                    } catch(err) {\r\n                    }\r\n                });\r\n\r\n                // Perform a clean-up by deleting those insiders who zeroed out in shares\r\n                if(numTransactionsAdded > 0) {\r\n                    this.database.getStockNames().forEach((stockName) => {\r\n                        this.database.getStockInsiders(stockName).forEach((insiderName) => {\r\n                            let insiderShares = 0;\r\n\r\n                            this.database.getInsiderTransactions(stockName, insiderName).forEach((transaction) => {\r\n                                if(transaction[\"type\"] === \"BUY\")\r\n                                    insiderShares += transaction[\"shares\"];\r\n                                else\r\n                                    insiderShares -= transaction[\"shares\"];\r\n                            });\r\n\r\n                            if(insiderShares <= 0)\r\n                                this.database.removeStockInsider(stockName, insiderName);\r\n                        });\r\n                    });\r\n                }\r\n\r\n                window.alert(numTransactionsAdded + \" transactions added.\");\r\n                window.location.href=\"#/dashboard\";\r\n            } catch(err) {\r\n                console.log(err);\r\n                window.alert(\"Invalid file.\");\r\n            }\r\n        };\r\n\r\n        fileReader.readAsText(file);\r\n    }\r\n\r\n    // Display the form\r\n    render() {\r\n        // Build the data list for stock names\r\n        let stockNamesDataList = this.database.getStockNames().map((stockName) => {\r\n            return (<option>{stockName}</option>);\r\n        });\r\n\r\n        // Build the data list for insider names from a stock\r\n        let insidersDataList = this.database.getStockInsiders(this.state.stock).map((insider) => {\r\n            return (<option>{insider}</option>);\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <NavigationBarComponent activeMenuName=\"Dashboard\" />\r\n                <Container>\r\n                    <Row>\r\n                        <Col md=\"6\">\r\n                            <h2>Add Insider Transaction</h2>\r\n                            <Form>\r\n                                <Form.Group className=\"mb-3\">\r\n                                    <Form.Label>Stock</Form.Label>\r\n                                    <Form.Control list=\"stock-names\" type=\"text\" value={this.state.stock} onChange={(e) => { this.setState({\"stock\": e.target.value}) }} />\r\n                                    <datalist id=\"stock-names\">\r\n                                        {stockNamesDataList}\r\n                                    </datalist>\r\n                                </Form.Group>\r\n                                <Form.Group className=\"mb-3\">\r\n                                    <Form.Label>Person</Form.Label>\r\n                                    <Form.Control list=\"insiders\" type=\"text\" value={this.state.person} onChange={(e) => { this.setState({\"person\": e.target.value}) }} />\r\n                                    <datalist id=\"insiders\">\r\n                                        {insidersDataList}\r\n                                    </datalist>\r\n                                </Form.Group>\r\n                                <Form.Group className=\"mb-3\">\r\n                                    <Form.Label>Date of Transaction</Form.Label>\r\n                                    <Form.Control type=\"date\" value={this.state.date} onChange={(e) => { this.setState({\"date\": e.target.value}) }} />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"mb-3\">\r\n                                    <Form.Label>Number of Shares</Form.Label>\r\n                                    <Form.Control type=\"number\" required value={this.state.shares} onChange={(e) => { this.setState({\"shares\": e.target.value}) }} />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"mb-3\">\r\n                                    <Form.Label>Transaction Type</Form.Label>\r\n                                    <Form.Check label=\"Buy\" value=\"Buy\" name=\"transaction-type\" type=\"radio\" checked={this.state.type === \"BUY\"} onChange={(e) => { this.setState({\"type\": \"BUY\"}) }} />\r\n                                    <Form.Check label=\"Sell\" value=\"Sell\" name=\"transaction-type\" type=\"radio\" checked={this.state.type === \"SELL\"} onChange={(e) => { this.setState({\"type\": \"SELL\"}) }} />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"mb-3\">\r\n                                    <Form.Label>Price Per Share</Form.Label>\r\n                                    <Form.Control type=\"number\" step=\"any\" placeholder=\"₱\" value={this.state.price} onChange={(e) => { this.setState({\"price\": e.target.value}) }} />\r\n                                </Form.Group>\r\n                            </Form>\r\n                            <p style={{textAlign: \"right\"}}>\r\n                                <Button variant=\"dark\" href=\"#/dashboard\">Back</Button>{\" \"}\r\n                                <Button variant=\"primary\" onClick={(e) => { this.handleAddTransactionClick() }}>Add Transaction</Button>\r\n                            </p>\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                            <h2>or Import Transactions</h2>\r\n                            <p>\r\n                                Select a CSV (Comma Separated Values) file to import. This will not delete your old data but will add more to it.\r\n                                Make sure your CSV file follows the appropriate format (example):\r\n                            </p>\r\n                            <Alert variant=\"dark\">\r\n                                <strong>Stock,Date,Person,Number of Shares,Trade,Price</strong><br />\r\n                                DMC,2021-02-10,MARIA CRISTINA C. GOTIANUN,2599431,BUY,5.56<br />\r\n                                DMC,2021-02-10,LUZ CONSUELO A. CONSUNJI,7798292,SELL,5.56 <br />\r\n                                ...\r\n                            </Alert>\r\n                            <Form>\r\n                                <Form.Group controlId=\"formFile\" className=\"mb-3\">\r\n                                    <Form.Control type=\"file\" onChange={(e) => { this.handleImportTransactionsClick(e.target.files[0]) }} />\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TransactionComponent;\r\n","import React from \"react\";\r\nimport { Table, Container, Button, Row, Col, Form } from \"react-bootstrap\";\r\nimport NavigationBarComponent from \"./NavigationBarComponent\";\r\nimport Database from \"../Entities/Database\";\r\nimport NumberUtils from \"../Entities/NumberUtils\";\r\n\r\n// View for drilled down information of a stock\r\nclass StockComponent extends React.Component {\r\n\r\n    // Initialize the view\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // This view is only accessible if the stock name parameter is provided in the URL\r\n        if(!(\"stock\" in props.match.params))\r\n            throw \"Oh snap!\";\r\n\r\n        this.database = new Database();\r\n        \r\n        this.state = {\r\n            \"fromDate\": this.database.getFromDateFilter(),\r\n            \"toDate\": this.database.getToDateFilter()\r\n        };\r\n        \r\n        this.stockName = props.match.params.stock;\r\n    }\r\n\r\n    // Delete the stock then redirect back to home page\r\n    handleDeleteStockClick() {\r\n        if(!window.confirm(\"Are you sure you want to delete this stock?\"))\r\n            return;\r\n\r\n        this.database.deleteStock(this.stockName);\r\n        window.location.href = \"#/dashboard\";\r\n    }\r\n\r\n    // Export the transactions to a CSV file for this stock\r\n    handleExportTransactionsClick() {\r\n        let fromDate = null;\r\n        let toDate = null;\r\n\r\n        if(this.state.fromDate !== \"\") {\r\n            fromDate = new Date(this.state.fromDate);\r\n            fromDate.setHours(0, 0, 0, 0);\r\n            fromDate = fromDate.getTime();\r\n        }\r\n\r\n        if(this.state.toDate !== \"\") {\r\n            toDate = new Date(this.state.toDate);\r\n            toDate.setHours(0, 0, 0, 0);\r\n            toDate = toDate.getTime();\r\n        }\r\n\r\n        // Build the CSV\r\n        let csvData = \"Stock,Date,Person,Number of Shares,Trade,Price\\n\";\r\n\r\n        this.database.getStockInsiders(this.stockName).forEach((insiderName) => {\r\n            this.database.getInsiderTransactions(this.stockName, insiderName).forEach((transaction) => {\r\n                // Apply filter\r\n                if(!(fromDate === null || toDate === null || (transaction[\"date\"] >= fromDate && transaction[\"date\"] <= toDate)))\r\n                    return;\r\n\r\n                let date = new Date(transaction[\"date\"]);\r\n\r\n                let csvLine = this.stockName;\r\n                csvLine += \",\" + date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate();\r\n                csvLine += \",\" + insiderName;\r\n                csvLine += \",\" + transaction[\"shares\"];\r\n                csvLine += \",\" + transaction[\"type\"];\r\n                csvLine += \",\" + transaction[\"price\"];\r\n\r\n                csvData += csvLine + \"\\n\";\r\n            });\r\n        });\r\n        \r\n        // Download the file\r\n        let downloadLink = document.createElement(\"a\");\r\n        downloadLink.download = this.stockName.toLowerCase().replace(/[^\\w\\s]|_/g, \"\").replace(/\\s+/g, \"\") + \"-insider-trading.csv\";\r\n        downloadLink.href=\"data:text/plain;charset=utf-8,\" + encodeURIComponent(csvData);\r\n        downloadLink.click();\r\n    }\r\n\r\n    // Render the display\r\n    render() {\r\n        let fromDate = null;\r\n        let toDate = null;\r\n\r\n        if(this.state.fromDate !== \"\") {\r\n            fromDate = new Date(this.state.fromDate);\r\n            fromDate.setHours(0, 0, 0, 0);\r\n            fromDate = fromDate.getTime();\r\n        }\r\n\r\n        if(this.state.toDate !== \"\") {\r\n            toDate = new Date(this.state.toDate);\r\n            toDate.setHours(0, 0, 0, 0);\r\n            toDate = toDate.getTime();\r\n        }\r\n        \r\n        // Initialize the display for the stock summary over-all\r\n        let sharesAcquired = 0;\r\n        let sharesDisposed = 0;\r\n        let totalCost = 0;\r\n        let highestSharePrice = -1;\r\n        let lowestSharePrice = -1;\r\n\r\n        let insiders = {};\r\n\r\n        // For each stock calculate the total shares acquired, sold, and purchase cost\r\n        this.database.getStockInsiders(this.stockName).forEach((insiderName) => {              \r\n            this.database.getInsiderTransactions(this.stockName, insiderName).forEach((transaction) => {\r\n                // Apply filter\r\n                if(!(fromDate === null || toDate === null || (transaction[\"date\"] >= fromDate && transaction[\"date\"] <= toDate)))\r\n                    return;\r\n\r\n                if(!(insiderName in insiders)) {\r\n                    insiders[insiderName] = {\r\n                        \"sharesAcquired\": 0,\r\n                        \"sharesDisposed\": 0,\r\n                        \"totalCost\": 0,\r\n                        \"highestSharePrice\": -1,\r\n                        \"lowestSharePrice\": -1\r\n                    };\r\n                }\r\n\r\n                let insider = insiders[insiderName];\r\n\r\n                if(transaction[\"type\"] === \"BUY\") {\r\n                    // Over-all data\r\n                    sharesAcquired += transaction[\"shares\"];\r\n                    totalCost += transaction[\"shares\"] * transaction[\"price\"];\r\n\r\n                    if(highestSharePrice === -1 || transaction[\"price\"] > highestSharePrice)\r\n                        highestSharePrice = transaction[\"price\"];\r\n                    \r\n                    if(lowestSharePrice === -1 || transaction[\"price\"] < lowestSharePrice)\r\n                        lowestSharePrice = transaction[\"price\"];\r\n\r\n                    // Specific insider data\r\n                    insider[\"sharesAcquired\"] += transaction[\"shares\"];\r\n                    insider[\"totalCost\"] += transaction[\"shares\"] * transaction[\"price\"];\r\n\r\n                    if(insider[\"highestSharePrice\"] === -1 || transaction[\"price\"] > insider[\"highestSharePrice\"])\r\n                        insider[\"highestSharePrice\"] = transaction[\"price\"];\r\n                    \r\n                    if(insider[\"lowestSharePrice\"] === -1 || transaction[\"price\"] < insider[\"lowestSharePrice\"])\r\n                        insider[\"lowestSharePrice\"] = transaction[\"price\"];\r\n                } else {\r\n                    // Over-all data\r\n                    sharesDisposed += transaction[\"shares\"];\r\n\r\n                    // Specific insider data\r\n                    insider[\"sharesDisposed\"] += transaction[\"shares\"];\r\n                }\r\n            });\r\n        });\r\n\r\n        if(sharesAcquired <= 0) {\r\n            highestSharePrice = 0;\r\n            lowestSharePrice = 0;\r\n        }\r\n\r\n        // Calculate the average cost per share\r\n        let averageCost = totalCost / sharesAcquired;\r\n\r\n        // Deduct the shares disposed\r\n        sharesAcquired -= sharesDisposed;\r\n        totalCost -= averageCost * sharesDisposed;\r\n\r\n        // Recalculate the final average cost after disposal\r\n        averageCost = sharesAcquired > 0 ? totalCost / sharesAcquired : 0;\r\n\r\n        // Build the rows for the insider data\r\n        let insiderTableRows = Object.keys(insiders).map((insiderName) => {\r\n            // Calculate the average cost for an insider\r\n            let insider = insiders[insiderName];\r\n            let insiderAverageCost = insider[\"totalCost\"] / insider[\"sharesAcquired\"];\r\n\r\n            // Deduct the shares disposed\r\n            insider[\"sharesAcquired\"] -= insider[\"sharesDisposed\"];\r\n            insider[\"totalCost\"] -= insiderAverageCost * insider[\"sharesDisposed\"];\r\n\r\n            // Recalculate the final averagge cost after disposal\r\n            insiderAverageCost = insider[\"sharesAcquired\"] > 0 ? insider[\"totalCost\"] / insider[\"sharesAcquired\"] : 0;\r\n\r\n            return (\r\n                <tr key={insiderName} onClick={(e) => { window.location.href=\"#/insider/\" + this.stockName + \"/\" + insiderName }}>\r\n                    <td><strong>{insiderName}</strong></td>\r\n                    <td>{ NumberUtils.formatCurrency(insiderAverageCost) }</td>\r\n                    <td>{ NumberUtils.formatCurrency(insider[\"highestSharePrice\"]) }</td>\r\n                    <td>{ NumberUtils.formatCurrency(insider[\"lowestSharePrice\"]) }</td>\r\n                    <td>{ NumberUtils.formatWithCommas(insider[\"sharesAcquired\"]) }</td>\r\n                </tr>\r\n            );\r\n        });\r\n        \r\n        return (\r\n            <>\r\n                <NavigationBarComponent activeMenuName=\"Dashboard\" />\r\n                <Container>\r\n                    <Row>\r\n                        <Col md=\"12\">\r\n                            <h2>{ this.stockName }</h2>\r\n                            <p>\r\n                                <Button variant=\"dark\" onClick={(e) => { window.location.href=\"#/dashboard\" }}>Back</Button>{\" \"}\r\n                                <Button variant=\"dark\" onClick={(e) => { this.handleExportTransactionsClick(); }}>Export to CSV File</Button>{\" \"}\r\n                                <Button variant=\"danger\" onClick={(e) => { this.handleDeleteStockClick(); }}>Delete Stock</Button>\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md=\"2\">\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Text className=\"text-muted\">From Date</Form.Text>\r\n                                <Form.Control type=\"date\" placeholder=\"yyyy-mm-dd\" value={this.state.fromDate} \r\n                                    onChange={(e) => { \r\n                                        this.database.saveFromDateFilter(e.target.value); \r\n                                        this.setState({\"fromDate\": e.target.value});\r\n                                    }} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md=\"2\">\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Text className=\"text-muted\">To Date</Form.Text>\r\n                                <Form.Control type=\"date\" placeholder=\"yyyy-mm-dd\" value={this.state.toDate} \r\n                                    onChange={(e) => { \r\n                                        this.database.saveToDateFilter(e.target.value);\r\n                                        this.setState({\"toDate\": e.target.value});\r\n                                    }} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md=\"2\">\r\n                            <Form.Group className=\"mb-3\">\r\n                                <br />\r\n                                <Button variant=\"dark\" onClick={(e) => {this.database.clearDateFilter(); this.setState({\"fromDate\": \"\", \"toDate\": \"\"}); }}>Reset</Button>\r\n                            </Form.Group>                            \r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Table responsive striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Average Cost Per Share</th>\r\n                                    <th>Highest Cost Per Share</th>\r\n                                    <th>Lowest Cost Per Share</th>\r\n                                    <th>Total Insider Shares</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr key={this.stockName}>\r\n                                    <td>{ NumberUtils.formatCurrency(averageCost) } </td>\r\n                                    <td>{ NumberUtils.formatCurrency(highestSharePrice) }</td>\r\n                                    <td>{ NumberUtils.formatCurrency(lowestSharePrice) }</td>\r\n                                    <td>{ NumberUtils.formatWithCommas(sharesAcquired) }</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md=\"12\">\r\n                            <h2>Insiders</h2>\r\n                            <Table responsive striped bordered hover variant=\"dark\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Average Cost Per Share</th>\r\n                                        <th>Highest Cost Per Share</th>\r\n                                        <th>Lowest Cost Per Share</th>\r\n                                        <th>Total Shares</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    { insiderTableRows }\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StockComponent;\r\n","import React from \"react\";\r\nimport { Table, Container, Button, Row, Col, Form } from \"react-bootstrap\";\r\nimport NavigationBarComponent from \"./NavigationBarComponent\";\r\nimport Database from \"../Entities/Database\";\r\nimport NumberUtils from \"../Entities/NumberUtils\";\r\n\r\n// View for drilled down information of an insider information on a stock\r\nclass InsiderComponent extends React.Component {\r\n\r\n    // Initialize the view\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // This view is only accessible if the stock name and insider name is provided in the URL\r\n        if(!(\"stock\" in props.match.params) || !(\"insider\" in props.match.params))\r\n            throw \"Oh snap!\";\r\n\r\n        this.database = new Database();\r\n\r\n        this.state = {\r\n            \"transactions\": [],\r\n            \"fromDate\": this.database.getFromDateFilter(),\r\n            \"toDate\": this.database.getToDateFilter()\r\n        };\r\n\r\n        this.stockName = props.match.params.stock;\r\n        this.insiderName = props.match.params.insider;\r\n    }\r\n\r\n    // Delete the current insider\r\n    handleDeleteInsiderClick() {\r\n        if(!window.confirm(\"Are you sure you want to delete this insider?\"))\r\n            return;\r\n        \r\n        this.database.removeStockInsider(this.stockName, this.insiderName);\r\n        window.location.href = \"#/stock/\" + this.stockName;\r\n    }\r\n\r\n    // Delete a transaction\r\n    handleTransactionCheckChange(event, transaction) {\r\n        let transactions = this.state.transactions.slice();\r\n\r\n        if(event.target.checked) {\r\n            // Add selected transaction to list\r\n            transactions.push(transaction);\r\n        } else {\r\n            // Remove selected transaction from list\r\n            let index = -1;\r\n\r\n            for(let i = 0; i < transactions.length; i++) {\r\n                if(transactions[i] === transaction) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if(index >= 0)\r\n                transactions.splice(index, 1);\r\n        }\r\n\r\n        this.setState({\"transactions\": transactions});\r\n    }\r\n\r\n    // Delete all selected transactions\r\n    handleDeleteTransactionsClick() {\r\n        if(this.state.transactions.length === 0 || !window.confirm(\"Are you sure you want to delete the selected transaction(s)?\"))\r\n            return;\r\n\r\n        this.state.transactions.forEach((transaction) => {\r\n            this.database.removeTransaction(this.stockName, this.insiderName, transaction);\r\n        });\r\n\r\n        // If the insider has no transactions anymore then delete it and move back to the socks page\r\n        if(this.database.getInsiderTransactions(this.stockName, this.insiderName).length === 0) {\r\n            this.database.removeStockInsider(this.stockName, this.insiderName);\r\n            window.location.href = \"#/stock/\" + this.stockName;\r\n            return;\r\n        }\r\n\r\n        this.setState({\"transactions\": []});        \r\n    }\r\n\r\n    // Export insider transactions of a stock\r\n    handleExportTransactionsClick() {\r\n        let fromDate = null;\r\n        let toDate = null;\r\n\r\n        if(this.state.fromDate !== \"\") {\r\n            fromDate = new Date(this.state.fromDate);\r\n            fromDate.setHours(0, 0, 0, 0);\r\n            fromDate = fromDate.getTime();\r\n        }\r\n\r\n        if(this.state.toDate !== \"\") {\r\n            toDate = new Date(this.state.toDate);\r\n            toDate.setHours(0, 0, 0, 0);\r\n            toDate = toDate.getTime();\r\n        }\r\n\r\n        // Build the CSV\r\n        let csvData = \"Stock,Date,Person,Number of Shares,Trade,Price\\n\";\r\n\r\n        this.database.getInsiderTransactions(this.stockName, this.insiderName).forEach((transaction) => {\r\n            // Apply filter\r\n            if(!(fromDate === null || toDate === null || (transaction[\"date\"] >= fromDate && transaction[\"date\"] <= toDate)))\r\n                return;\r\n\r\n            let date = new Date(transaction[\"date\"]);\r\n\r\n            let csvLine = this.stockName;\r\n            csvLine += \",\" + date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate();\r\n            csvLine += \",\" + this.insiderName;\r\n            csvLine += \",\" + transaction[\"shares\"];\r\n            csvLine += \",\" + transaction[\"type\"];\r\n            csvLine += \",\" + transaction[\"price\"];\r\n\r\n            csvData += csvLine + \"\\n\";\r\n        });\r\n        \r\n        // Download the file\r\n        let downloadLink = document.createElement(\"a\");\r\n        downloadLink.download = this.insiderName.toLowerCase().replace(/[^\\w\\s]|_/g, \"\").replace(/\\s+/g, \"\") + \"-\" \r\n            + this.stockName.toLowerCase().replace(/[^\\w\\s]|_/g, \"\").replace(/\\s+/g, \"\") \r\n            + \"-insider-trading.csv\";\r\n        downloadLink.href=\"data:text/plain;charset=utf-8,\" + encodeURIComponent(csvData);\r\n        downloadLink.click();\r\n    }\r\n\r\n    // Check if transaction is checked\r\n    isTransactionChecked(transaction) {\r\n        for(let i = 0; i < this.state.transactions.length; i++)\r\n            if(this.state.transactions[i] === transaction)\r\n                return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    // Render the display\r\n    render() {\r\n        let fromDate = null;\r\n        let toDate = null;\r\n\r\n        if(this.state.fromDate !== \"\") {\r\n            fromDate = new Date(this.state.fromDate);\r\n            fromDate.setHours(0, 0, 0, 0);\r\n            fromDate = fromDate.getTime();\r\n        }\r\n\r\n        if(this.state.toDate !== \"\") {\r\n            toDate = new Date(this.state.toDate);\r\n            toDate.setHours(0, 0, 0, 0);\r\n            toDate = toDate.getTime();\r\n        }\r\n\r\n        let sharesAcquired = 0;\r\n        let sharesDisposed = 0;\r\n        let totalCost = 0;\r\n        let highestSharePrice = -1;\r\n        let lowestSharePrice = -1;\r\n        let transactions = this.database.getInsiderTransactions(this.stockName, this.insiderName);\r\n        \r\n        // Build the display for the insider's transactions\r\n        transactions.forEach((transaction) => {\r\n            // Apply filter\r\n            if(!(fromDate === null || toDate === null || (transaction[\"date\"] >= fromDate && transaction[\"date\"] <= toDate)))\r\n                return;\r\n\r\n            if(transaction[\"type\"] === \"BUY\") {\r\n                sharesAcquired += transaction[\"shares\"];\r\n                totalCost += transaction[\"shares\"] * transaction[\"price\"];\r\n\r\n                if(highestSharePrice === -1 || transaction[\"price\"] > highestSharePrice)\r\n                    highestSharePrice = transaction[\"price\"];\r\n\r\n                if(lowestSharePrice === -1 || transaction[\"price\"] < lowestSharePrice)\r\n                    lowestSharePrice = transaction[\"price\"];\r\n            } else {\r\n                sharesDisposed += transaction[\"shares\"];\r\n            }\r\n        });\r\n\r\n        // Calculate the average cost per share\r\n        let averageCost = totalCost / sharesAcquired;\r\n\r\n        // Deduct the shares disposed\r\n        sharesAcquired -= sharesDisposed;\r\n        totalCost -= averageCost * sharesDisposed;\r\n\r\n        // Recalculate the final average cost after disposal\r\n        averageCost = sharesAcquired > 0 ? totalCost / sharesAcquired : 0;\r\n\r\n        // Build the rows for the transactions in a table sorted by date in descending order\r\n        transactions.sort((transactionA, transactionB) => {\r\n            return transactionB[\"date\"] - transactionA[\"date\"];\r\n        });\r\n\r\n        let transactionTableRows = transactions.map((transaction) => {\r\n            // Apply filter\r\n            if(!(fromDate === null || toDate === null || (transaction[\"date\"] >= fromDate && transaction[\"date\"] <= toDate)))\r\n                return;\r\n            \r\n            let date = new Date(transaction[\"date\"]);\r\n            \r\n            return (\r\n                <tr>\r\n                    <td>\r\n                        <Form.Check checked={ this.isTransactionChecked(transaction) } onChange={(e) => { this.handleTransactionCheckChange(e, transaction) }}></Form.Check>\r\n                    </td>\r\n                    <td>{ date.getFullYear()}-{date.getMonth() + 1}-{date.getDate() }</td> \r\n                    <td>{ NumberUtils.formatWithCommas(transaction[\"shares\"]) }</td>\r\n                    <td>{ transaction[\"type\"]}</td>\r\n                    <td>{ NumberUtils.formatCurrency(transaction[\"price\"]) }</td>\r\n                    <td>{ NumberUtils.formatCurrency(transaction[\"shares\"] * transaction[\"price\"]) }</td>\r\n                </tr>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <NavigationBarComponent activeMenuName=\"Dashboard\" />\r\n                <Container>\r\n                    <Row>\r\n                        <Col md=\"12\">\r\n                            <h2>{ this.stockName } / { this.insiderName }</h2>\r\n                            <p>\r\n                                <Button variant=\"dark\" onClick={(e) => { window.location.href=\"#/stock/\" + this.stockName }}>Back</Button>{\" \"}\r\n                                <Button variant=\"dark\" onClick={(e) => { this.handleExportTransactionsClick(); }}>Export to CSV File</Button>{\" \"}\r\n                                <Button variant=\"danger\" onClick={(e) => { this.handleDeleteInsiderClick(); }}>Delete Insider</Button>\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md=\"2\">\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Text className=\"text-muted\">From Date</Form.Text>\r\n                                <Form.Control type=\"date\" placeholder=\"yyyy-mm-dd\" value={this.state.fromDate} \r\n                                    onChange={(e) => { \r\n                                        this.database.saveFromDateFilter(e.target.value); \r\n                                        this.setState({\"fromDate\": e.target.value});\r\n                                    }} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md=\"2\">\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Text className=\"text-muted\">To Date</Form.Text>\r\n                                <Form.Control type=\"date\" placeholder=\"yyyy-mm-dd\" value={this.state.toDate} \r\n                                    onChange={(e) => { \r\n                                        this.database.saveToDateFilter(e.target.value);\r\n                                        this.setState({\"toDate\": e.target.value});\r\n                                    }} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md=\"2\">\r\n                            <Form.Group className=\"mb-3\">\r\n                                <br />\r\n                                <Button variant=\"dark\" onClick={(e) => {this.database.clearDateFilter(); this.setState({\"fromDate\": \"\", \"toDate\": \"\"}); }}>Reset</Button>\r\n                            </Form.Group>                            \r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Table responsive striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Average Cost Per Share</th>\r\n                                    <th>Highest Cost Per Share</th>\r\n                                    <th>Lowest Cost Per Share</th>\r\n                                    <th>Total Insider Shares</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr key={this.insiderName}>\r\n                                    <td>{ NumberUtils.formatCurrency(averageCost) }</td>\r\n                                    <td>{ NumberUtils.formatCurrency(highestSharePrice) }</td>\r\n                                    <td>{ NumberUtils.formatCurrency(lowestSharePrice) }</td>\r\n                                    <td>{ NumberUtils.formatWithCommas(sharesAcquired) }</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md=\"12\">\r\n                            <h2>Transactions</h2>\r\n                            <p>\r\n                                <Button variant=\"danger\" onClick={(e) => { this.handleDeleteTransactionsClick(); }}>Delete Selected Transactions</Button>\r\n                            </p>\r\n                            <Table responsive striped bordered hover variant=\"dark\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th style={{width: \"15px\" }}></th>\r\n                                        <th>Date</th>\r\n                                        <th>Shares</th>\r\n                                        <th>Type</th>\r\n                                        <th>Price Per Share</th>\r\n                                        <th>Market Value</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    { transactionTableRows }\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InsiderComponent;\r\n","import React from \"react\";\r\nimport { Col, Container, Row, Alert, Button} from \"react-bootstrap\";\r\nimport NavigationBarComponent from \"./NavigationBarComponent\";\r\n\r\nclass AboutComponent extends React.Component {\r\n\r\n    // Initialize the about page\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    // Open my BMC page\r\n    buyMeACoffee() {\r\n        let link = document.createElement(\"a\");\r\n        link.href = \"https://www.buymeacoffee.com/it2051229\";\r\n        link.target = \"_blank\";\r\n        link.click();\r\n    }\r\n\r\n    // Display the dashboard\r\n    render() {\r\n        return (\r\n            <>\r\n                <NavigationBarComponent activeMenuName=\"About\" />\r\n                <Container>\r\n                    <Row>\r\n                        <Col md=\"6\">\r\n                            <h3>Insider Trading Strategy</h3>\r\n                            <p>\r\n                                Insiders are those who work inside the company such as the chairman, directors, \r\n                                treasurers, auditors, and whatnot. They hold first-hand knowledge of what is \r\n                                going on inside the company. When an insider buys their company's share, it \r\n                                only means that they believe that the company is going to do great and that \r\n                                whatever the company is doing now will yield a good financial report. Once the \r\n                                report is published publicly, many investors will put a higher price on the \r\n                                stock because the company's value has increased. Of course, investors who bought \r\n                                earlier at a lower price have now gained profit.\r\n                            </p>\r\n                            <h3>Do you keep my data?</h3>\r\n                            <p>\r\n                                No, all your data are private and locally stored on this web browser. We do not keep your data in our servers. \r\n                                You cannot access your data from another computer or web browser.\r\n                            </p>\r\n                            <h3>Can I keep my data?</h3>\r\n                            <p>\r\n                                Yes, you can export your data. It will be extracted from your computer and downloaded as a file. \r\n                                You can then import the file through using this app from another web browser.\r\n                            </p>\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                            <h3>Creative Commons License.</h3>\r\n                            <p>\r\n                                <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc/4.0/\">\r\n                                    <img alt=\"Creative Commons License\" style={{borderWidth:0}} src=\"https://i.creativecommons.org/l/by-nc/4.0/88x31.png\" />\r\n                                </a>\r\n                                <br />\r\n                                <span xmlnsDct=\"http://purl.org/dc/terms/\" property=\"dct:title\">\r\n                                    Insider Trading\r\n                                </span> by {\" \"}\r\n                                <a xmlnsCc=\"http://creativecommons.org/ns#\" href=\"https://www.it2051229.com/insidertrading\" property=\"cc:attributionName\" \r\n                                rel=\"cc:attributionURL\">it2051229</a> is licensed under a \r\n                                <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc/4.0/\">Creative Commons Attribution-NonCommercial 4.0 International License</a>.<br />\r\n                                Based on a work at <a xmlnsDct=\"http://purl.org/dc/terms/\" href=\"https://github.com/it2051229/it2051229.github.io/tree/master/insider-trading\" rel=\"dct:source\">https://github.com/it2051229/it2051229.github.io/tree/master/insider-trading</a>.\r\n                            </p>\r\n                            <h3>Disclaimer</h3>\r\n                            <p>\r\n                                This project is a work in progress but you're using a stable version. There might be changes \r\n                                and improvements anytime so you should use it at your own risk. We recommend to backup your data frequently.\r\n                            </p>\r\n                            <p>\r\n                                If you're a developer feel free to fork our source code but don't forget to give credits.\r\n                            </p>\r\n                            <p>\r\n                                If you found any issues feel free to shoot \r\n                                us a message at <a href=\"mailto:contact@it2051229.com\">contact@it2051229.com</a>.\r\n                            </p>\r\n                            <p>\r\n                                <center><Button variant=\"primary\" onClick={(e) => this.buyMeACoffee()}>Buy me a coffee!</Button></center>\r\n                            </p>                            \r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AboutComponent;\r\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport DashboardComponent from \"./Components/DashboardComponent\";\nimport TransactionComponent from \"./Components/TransactionComponent\";\nimport StockComponent from \"./Components/StockComponent\";\nimport InsiderComponent from \"./Components/InsiderComponent\";\nimport AboutComponent from \"./Components/AboutComponent\";\n\n// Entry class of the program\nclass App extends React.Component {\n\n\t// Entry point of the program, set the routes\n\trender() {\n        return (\n\t\t\t<Router>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" component={DashboardComponent} />\n\t\t\t\t\t<Route exact path=\"/dashboard\" component={DashboardComponent} />\n\t\t\t\t\t<Route exact path=\"/transaction\" component={TransactionComponent} />\n\t\t\t\t\t<Route exact path=\"/stock/:stock\" component={StockComponent} />\n\t\t\t\t\t<Route exact path=\"/insider/:stock/:insider\" component={InsiderComponent} />\n\t\t\t\t\t<Route exact path=\"/about\" component={AboutComponent} />\n\t\t\t\t</Switch>\n\t\t\t</Router>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}